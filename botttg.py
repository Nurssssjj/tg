import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import requests

BOT_TOKEN = '7555630505:AAGWtcMBE5CBkRVz-fzc8En9X7BEFIr3qiQ'
ADMIN_ID = 6577960531
WHATSAPP_GROUP_CHAT_ID = '120363418881982137@g.us'
GREEN_API_URL = 'https://7105.api.greenapi.com'
GREEN_API_ID_INSTANCE = '7105242193'
GREEN_API_TOKEN = '2efdd4fb9eaa4d82972f8c3fb20d13fe83636e14b4b3404daa'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

perfumes = {
    'male': [
        'Creed Aventus', 'Dior Sauvage', 'Tom Ford Oud Wood',
        'Bleu de Chanel', 'Versace Eros', 'Acqua di Gio'
    ],
    'female': [
        'Chanel Coco Mademoiselle', 'La Vie Est Belle', 'YSL Libre',
        "Dior J'adore", 'Gucci Bloom', 'Good Girl'
    ]
}

PRICES = {
    'Creed Aventus': {5: 6000, 10: 11000, 50: 49000, 100: 89000},
    'Dior Sauvage': {5: 5000, 10: 9500, 50: 44000, 100: 85000},
    'Tom Ford Oud Wood': {5: 7000, 10: 12000, 50: 52000, 100: 92000},
    'Bleu de Chanel': {5: 5500, 10: 10000, 50: 46000, 100: 87000},
    'Versace Eros': {5: 4800, 10: 9000, 50: 43000, 100: 84000},
    'Acqua di Gio': {5: 5300, 10: 9800, 50: 45000, 100: 86000},
    'Chanel Coco Mademoiselle': {5: 6000, 10: 11000, 50: 49000, 100: 89000},
    'La Vie Est Belle': {5: 5000, 10: 9500, 50: 44000, 100: 85000},
    'YSL Libre': {5: 7000, 10: 12000, 50: 52000, 100: 92000},
    "Dior J'adore": {5: 5800, 10: 10500, 50: 47000, 100: 88000},
    'Gucci Bloom': {5: 5100, 10: 9700, 50: 45000, 100: 86000},
    'Good Girl': {5: 5300, 10: 9900, 50: 46000, 100: 87000}
}

texts = {
    "kz": {
        "main_menu": "–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–¥—ã“£—ã–∑. –¢–∞“£–¥–∞“£—ã–∑:",
        "select_gender": "–ü–∞—Ä—Ñ—é–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Å—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "select_perfume": "–ê—Ä–æ–º–∞—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        "select_volume": "–ö”©–ª–µ–º—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "select_delivery": "–ñ–µ—Ç–∫—ñ–∑—É ”ô–¥—ñ—Å—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "invalid_perfume": "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –æ–Ω–¥–∞–π –∞—Ä–æ–º–∞—Ç –∂–æ“õ. –ë–∞—Å“õ–∞—Å—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "invalid_volume": "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º“±–Ω–¥–∞–π –∫”©–ª–µ–º –∂–æ“õ. –ë–∞—Å“õ–∞—Å—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "back": "üîô –ù–∞–∑–∞–¥",
        "home": "üì¶ –ú–µ–Ω—é“ì–∞ –æ—Ä–∞–ª—É"
    },
    "ru": {
        "main_menu": "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ:",
        "select_gender": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∞—Ä—Ñ—é–º–∞:",
        "select_perfume": "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–æ–º–∞—Ç:",
        "select_volume": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º:",
        "select_delivery": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        "invalid_perfume": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∞ –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:",
        "invalid_volume": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—ä—ë–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:",
        "back": "üîô –ù–∞–∑–∞–¥",
        "home": "üì¶ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    }
}

class OrderForm(StatesGroup):
    gender = State()
    product = State()
    volume = State()
    delivery = State()
    name = State()
    phone = State()
    city = State()
    address = State()

def get_main_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π –ø–∞—Ä—Ñ—é–º"), KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π –ø–∞—Ä—Ñ—é–º")],
            [KeyboardButton(text=texts[lang]["home"])]
        ], resize_keyboard=True
    )

def get_perfume_menu(gender, lang):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=name)] for name in perfumes[gender]] + [[KeyboardButton(text=texts[lang]["back"]), KeyboardButton(text=texts[lang]["home"])]],
        resize_keyboard=True
    )

def get_volume_menu(product, lang):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{v} –º–ª - {PRICES[product][v]} ‚Ç∏")] for v in PRICES[product]] + [[KeyboardButton(text=texts[lang]["back"]), KeyboardButton(text=texts[lang]["home"])]],
        resize_keyboard=True
    )

def get_delivery_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –ö–∞–∑–ø–æ—á—Ç–∞")],
            [KeyboardButton(text="üöï –Ø–Ω–¥–µ–∫—Å –î–æ—Å—Ç–∞–≤–∫–∞")],
            [KeyboardButton(text=texts[lang]["back"]), KeyboardButton(text=texts[lang]["home"])]
        ], resize_keyboard=True
    )

async def send_whatsapp_message(chat_id: str, message: str) -> bool:
    url = f"{GREEN_API_URL}/waInstance{GREEN_API_ID_INSTANCE}/sendMessage/{GREEN_API_TOKEN}"
    payload = {"chatId": chat_id, "message": message}
    try:
        r = requests.post(url, json=payload)
        return r.status_code == 200
    except Exception as e:
        print("–û—à–∏–±–∫–∞ WhatsApp:", e)
        return False

@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.clear()
    lang_menu = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üá∞üáø “ö–∞–∑–∞“õ—à–∞"), KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")]], resize_keyboard=True
    )
    await message.answer("–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=lang_menu)

@dp.message(F.text.in_(["üá∞üáø “ö–∞–∑–∞“õ—à–∞", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"]))
async def set_language(message: Message, state: FSMContext):
    lang = "kz" if "“ö–∞–∑–∞“õ—à–∞" in message.text else "ru"
    await state.update_data(lang=lang)
    await message.answer(texts[lang]["main_menu"], reply_markup=get_main_menu(lang))
    await state.set_state(OrderForm.gender)

@dp.message(F.text.in_([texts["kz"]["home"], texts["ru"]["home"]]))
async def back_to_main_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "kz")
    await message.answer(texts[lang]["main_menu"], reply_markup=get_main_menu(lang))
    await state.set_state(OrderForm.gender)

@dp.message(StateFilter(OrderForm.gender))
async def select_gender(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "kz")
    if "–ú—É–∂—Å–∫–æ–π" in message.text:
        await state.update_data(gender='male')
    elif "–ñ–µ–Ω—Å–∫–∏–π" in message.text:
        await state.update_data(gender='female')
    else:
        return await message.answer(texts[lang]["select_gender"], reply_markup=get_main_menu(lang))
    
    data = await state.get_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
    await message.answer(texts[lang]["select_perfume"], reply_markup=get_perfume_menu(data['gender'], lang))
    await state.set_state(OrderForm.product)

@dp.message(StateFilter(OrderForm.product))
async def select_product(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "kz")
    gender = data.get("gender")
    
    if message.text == texts[lang]["back"]:
        return await start(message, state)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Ä–æ–º–∞—Ç –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if gender is None or message.text not in perfumes.get(gender, []):
        return await message.answer(texts[lang]["invalid_perfume"], reply_markup=get_perfume_menu(gender if gender else 'male', lang))
    
    await state.update_data(product=message.text)
    await message.answer(texts[lang]["select_volume"], reply_markup=get_volume_menu(message.text, lang))
    await state.set_state(OrderForm.volume)

@dp.message(StateFilter(OrderForm.volume))
async def select_volume(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "kz")

    if message.text == texts[lang]["back"]:
        await message.answer(texts[lang]["select_perfume"], reply_markup=get_perfume_menu(data['gender'], lang))
        return await state.set_state(OrderForm.product)

    try:
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "5 –º–ª - 6000 ‚Ç∏", –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int
        volume = int(message.text.split()[0])
    except (ValueError, IndexError):
        return await message.answer(texts[lang]["invalid_volume"], reply_markup=get_volume_menu(data['product'], lang))

    if volume not in PRICES.get(data['product'], {}):
        return await message.answer(texts[lang]["invalid_volume"], reply_markup=get_volume_menu(data['product'], lang))

    await state.update_data(volume=volume)
    await state.update_data(price=PRICES[data['product']][volume])

    await message.answer(texts[lang]["select_delivery"], reply_markup=get_delivery_menu(lang))
    await state.set_state(OrderForm.delivery)

@dp.message(StateFilter(OrderForm.delivery))
async def delivery_select(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "kz")
    
    if message.text == texts[lang]["back"]:
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –æ–±—ä—ë–º–∞
        await message.answer(texts[lang]["select_volume"], reply_markup=get_volume_menu(data['product'], lang))
        return await state.set_state(OrderForm.volume)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    if lang == "kz":
        await message.answer("–ê—Ç—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    
    await state.set_state(OrderForm.name)

@dp.message(StateFilter(OrderForm.name))
async def get_name(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "kz")

    await state.update_data(name=message.text)

    if lang == "kz":
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    await state.set_state(OrderForm.phone)

@dp.message(StateFilter(OrderForm.phone))
async def get_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "kz")

    await state.update_data(phone=message.text)

    if lang == "kz":
        await message.answer("“ö–∞–ª–∞“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")

    await state.set_state(OrderForm.city)

@dp.message(StateFilter(OrderForm.city))
async def get_city(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "kz")

    await state.update_data(city=message.text)

    if lang == "kz":
        await message.answer("–ú–µ–∫–µ–Ω–∂–∞–π—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–∫”©—à–µ—Å—ñ, “Ø–π—ñ, –ø”ô—Ç–µ—Ä—ñ):")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤):")

    await state.set_state(OrderForm.address)

@dp.message(StateFilter(OrderForm.address))
async def confirm_order(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()
    lang = data.get("lang", "kz")

    text = (
        f"üßæ *–¢–∞–ø—Å—ã—Ä—ã—Å*\n" if lang == "kz" else f"üßæ *–ó–∞–∫–∞–∑*\n"
    ) + (
        f"üëÉ –ê—Ä–æ–º–∞—Ç: {data['product']} ({data['volume']} –º–ª)\n"
        f"üí∞ –ë–∞“ì–∞—Å—ã: {data['price']} ‚Ç∏\n"
        f"üöö –ñ–µ—Ç–∫—ñ–∑—É: {data['delivery']}\n"
        f"üë§ –ê—Ç—ã: {data['name']}\n"
        f"üìû –¢–µ–ª: {data['phone']}\n"
        f"üèô “ö–∞–ª–∞: {data['city']}\n"
        f"üè† –ú–µ–∫–µ–Ω–∂–∞–π: {data['address']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –∫–∞–Ω–∞–ª Telegram
    await bot.send_message(chat_id=-1002280644534, text=text, parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    await bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WhatsApp API
    await send_whatsapp_message(WHATSAPP_GROUP_CHAT_ID, text)

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "–†–∞“õ–º–µ—Ç! –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã. –ú–µ–Ω–µ–¥–∂–µ—Ä —Ö–∞–±–∞—Ä–ª–∞—Å–∞–¥—ã." if lang == "kz" else "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
        reply_markup=get_main_menu(lang)
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –î–∞–ª–µ–µ –∏–¥—É—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (select_gender, select_product –∏ —Ç.–¥.) ‚Äî –æ–Ω–∏ —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Canvas.

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
