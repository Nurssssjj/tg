import asyncio
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = '7555630505:AAGWtcMBE5CBkRVz-fzc8En9X7BEFIr3qiQ'
ADMIN_ID = 6577960531
WHATSAPP_GROUP_CHAT_ID = '120363418881982137@g.us'

# === GREEN API –ù–ê–°–¢–†–û–ô–ö–ò ===
GREEN_API_URL = 'https://7105.api.greenapi.com'
GREEN_API_ID_INSTANCE = '7105242193'
GREEN_API_TOKEN = '2efdd4fb9eaa4d82972f8c3fb20d13fe83636e14b4b3404daa'

# === –¶–ï–ù–´ ===
PRICES = {
    5: 5000,
    10: 10000,
    50: 45000,
    100: 80000
}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

perfumes = {
    'male': [
        {'name': 'Creed Aventus', 'description': 'Ananas, Bergamot, Musk'},
        {'name': 'Dior Sauvage', 'description': 'Bergamot, Pepper, Patchouli'},
        {'name': 'Tom Ford Oud Wood', 'description': 'Oud, Sandalwood, Amber'}
    ],
    'female': [
        {'name': 'Chanel Coco Mademoiselle', 'description': 'Orange, Jasmine, Vanilla'},
        {'name': 'Lanc√¥me La Vie Est Belle', 'description': 'Iris, Vanilla, Praline'},
        {'name': 'Yves Saint Laurent Libre', 'description': 'Lavender, Vanilla, Amber'}
    ]
}

volumes = [5, 10, 50, 100]

class OrderForm(StatesGroup):
    product = State()
    volume = State()
    delivery = State()
    name = State()
    phone = State()
    city = State()
    address = State()
    lang = State()

user_langs = {}

texts = {
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        "choose_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑",
        "catalog": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        "male": "–ú—É–∂—Å–∫–æ–π –ø–∞—Ä—Ñ—é–º",
        "female": "–ñ–µ–Ω—Å–∫–∏–π –ø–∞—Ä—Ñ—é–º",
        "volume": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º:",
        "delivery": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        "name": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        "phone": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "city": "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        "address": "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤):",
        "done": "–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.",
        "admin_panel": "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "whatsapp": "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp",
        "error_whatsapp": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ WhatsApp."
    },
    "kz": {
        "welcome": "–°”ô–ª–µ–º! –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "choose_lang": "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
        "catalog": "–°–∞–Ω–∞—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        "male": "–ï—Ä–ª–µ—Ä –ø–∞—Ä—Ñ—é–º—ñ",
        "female": "”ò–π–µ–ª–¥–µ—Ä –ø–∞—Ä—Ñ—é–º—ñ",
        "volume": "–ö”©–ª–µ–º—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "delivery": "–ñ–µ—Ç–∫—ñ–∑—É —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "name": "–ê—Ç—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        "phone": "–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        "city": "“ö–∞–ª–∞–Ω—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        "address": "–ú–µ–∫–µ–Ω–∂–∞–π—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–∫”©—à–µ—Å—ñ, “Ø–π—ñ, –ø”ô—Ç–µ—Ä—ñ):",
        "done": "–†–∞“õ–º–µ—Ç! –¢–∞–ø—Å—ã—Ä—ã—Å “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã.",
        "admin_panel": "”ò–∫—ñ–º—à—ñ –ø–∞–Ω–µ–ª—ñ",
        "whatsapp": "üì± WhatsApp-“õ–∞ –∂—ñ–±–µ—Ä—É",
        "error_whatsapp": "WhatsApp-“õ–∞ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã."
    }
}

def t(lang, key):
    return texts.get(lang, texts['ru'])[key]

async def send_whatsapp_message(chat_id: str, message: str) -> bool:
    url = f"{GREEN_API_URL}/waInstance{GREEN_API_ID_INSTANCE}/sendMessage/{GREEN_API_TOKEN}"
    payload = {
        "chatId": chat_id,
        "message": message
    }
    try:
        response = requests.post(url, json=payload)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ WhatsApp: {e}")
        return False

@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
         InlineKeyboardButton(text="“ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")]
    ])
    await message.answer(t("ru", "welcome"), reply_markup=keyboard)
    await state.set_state(OrderForm.lang)

@dp.callback_query(F.data.startswith("lang_"))
async def set_lang(callback: CallbackQuery, state: FSMContext):
    lang = callback.data.split("_")[1]
    user_langs[callback.from_user.id] = lang
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t(lang, "male"), callback_data='male')],
        [InlineKeyboardButton(text=t(lang, "female"), callback_data='female')]
    ])
    await callback.message.answer(t(lang, "catalog"), reply_markup=keyboard)
    await callback.answer()

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    lang = user_langs.get(message.from_user.id, 'ru')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t(lang, "whatsapp"), url=f"https://chat.whatsapp.com/BRyFvffIg6O3Oie6BuFMbv")]
    ])
    await message.answer(t(lang, "admin_panel"), reply_markup=keyboard)

@dp.message(Command("catalog"))
async def catalog(message: Message):
    lang = user_langs.get(message.from_user.id, 'ru')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t(lang, "male"), callback_data='male')],
        [InlineKeyboardButton(text=t(lang, "female"), callback_data='female')]
    ])
    await message.answer(t(lang, "catalog"), reply_markup=keyboard)

@dp.callback_query(F.data.in_(['male', 'female']))
async def show_perfumes(callback: CallbackQuery):
    lang = user_langs.get(callback.from_user.id, 'ru')
    category = callback.data
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=perfume['name'], callback_data=f"order_{perfume['name'].replace(' ', '_')}")]
        for perfume in perfumes[category]
    ])
    await callback.message.edit_text(t(lang, 'catalog'), reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith('order_'))
async def choose_volume(callback: CallbackQuery, state: FSMContext):
    product_name = callback.data.replace('order_', '').replace('_', ' ')
    await state.update_data(product=product_name)
    lang = user_langs.get(callback.from_user.id, 'ru')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{v} –º–ª - {PRICES[v]} KZT", callback_data=f"volume_{v}")]
        for v in volumes
    ])
    await callback.message.answer(t(lang, "volume"), reply_markup=keyboard)
    await state.set_state(OrderForm.volume)
    await callback.answer()

@dp.callback_query(F.data.startswith("volume_"), StateFilter(OrderForm.volume))
async def choose_delivery(callback: CallbackQuery, state: FSMContext):
    volume = int(callback.data.replace('volume_', ''))
    await state.update_data(volume=volume, price=PRICES[volume])
    lang = user_langs.get(callback.from_user.id, 'ru')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–∂–≥–æ—Ä–æ–¥ (–ö–∞–∑–ø–æ—á—Ç–∞)", callback_data='delivery_kazpost')],
        [InlineKeyboardButton(text="–ì–æ—Ä–æ–¥ (–Ø–Ω–¥–µ–∫—Å)", callback_data='delivery_yandex')]
    ])
    await callback.message.answer(t(lang, "delivery"), reply_markup=keyboard)
    await state.set_state(OrderForm.delivery)
    await callback.answer()

@dp.callback_query(StateFilter(OrderForm.delivery))
async def ask_name(callback: CallbackQuery, state: FSMContext):
    await state.update_data(delivery='–ö–∞–∑–ø–æ—á—Ç–∞' if callback.data == 'delivery_kazpost' else '–Ø–Ω–¥–µ–∫—Å –î–æ—Å—Ç–∞–≤–∫–∞')
    lang = user_langs.get(callback.from_user.id, 'ru')
    await callback.message.answer(t(lang, "name"))
    await state.set_state(OrderForm.name)
    await callback.answer()

@dp.message(StateFilter(OrderForm.name))
async def ask_phone(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    lang = user_langs.get(message.from_user.id, 'ru')
    await message.answer(t(lang, "phone"))
    await state.set_state(OrderForm.phone)

@dp.message(StateFilter(OrderForm.phone))
async def ask_city(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    lang = user_langs.get(message.from_user.id, 'ru')
    await message.answer(t(lang, "city"))
    await state.set_state(OrderForm.city)

@dp.message(StateFilter(OrderForm.city))
async def ask_address(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    lang = user_langs.get(message.from_user.id, 'ru')
    await message.answer(t(lang, "address"))
    await state.set_state(OrderForm.address)

@dp.message(StateFilter(OrderForm.address))
async def finish_order(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()
    lang = user_langs.get(message.from_user.id, 'ru')
    order_text = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
        f"–¢–æ–≤–∞—Ä: {data['product']} ({data['volume']} –º–ª)\n"
        f"–¶–µ–Ω–∞: {data['price']} KZT\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"WhatsApp: https://wa.me/{data['phone']}"
    )

    whatsapp_encoded_text = order_text.replace('\n', '%0A')
    await bot.send_message(chat_id=-1002280644534, text=order_text)

    whatsapp_success = await send_whatsapp_message(WHATSAPP_GROUP_CHAT_ID, order_text)
    if not whatsapp_success:
        await message.answer(t(lang, "error_whatsapp"))

    await message.answer(t(lang, "done"))
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
